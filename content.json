{"meta":{"title":"OnlywithUU","subtitle":"记录·学习·生活","description":"Record,Study,Life","author":"OnlywithUU","url":"http://OnlywithUU.github.io","root":"/"},"pages":[{"title":"404","date":"2021-03-02T18:29:39.000Z","updated":"2021-03-02T18:29:53.660Z","comments":false,"path":"404/index.html","permalink":"http://onlywithuu.github.io/404/index.html","excerpt":"","text":""},{"title":"关于我","date":"2021-02-14T16:11:00.000Z","updated":"2021-03-02T19:55:56.622Z","comments":false,"path":"about/index.html","permalink":"http://onlywithuu.github.io/about/index.html","excerpt":"","text":""},{"title":"contact","date":"2021-03-02T18:26:19.000Z","updated":"2021-03-02T21:53:26.683Z","comments":true,"path":"contact/index.html","permalink":"http://onlywithuu.github.io/contact/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-03-02T18:23:45.000Z","updated":"2021-03-02T18:24:16.855Z","comments":false,"path":"categories/index.html","permalink":"http://onlywithuu.github.io/categories/index.html","excerpt":"","text":""},{"title":"galleries","date":"2021-03-02T20:55:26.000Z","updated":"2021-03-02T20:55:39.948Z","comments":false,"path":"galleries/index.html","permalink":"http://onlywithuu.github.io/galleries/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-03-02T18:24:33.000Z","updated":"2021-03-02T18:24:46.174Z","comments":false,"path":"tags/index.html","permalink":"http://onlywithuu.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-02-23T09:36:10.000Z","updated":"2021-03-02T19:44:07.664Z","comments":false,"path":"friends/index.html","permalink":"http://onlywithuu.github.io/friends/index.html","excerpt":"","text":""},{"title":"2020","date":"2020-02-19T02:51:50.000Z","updated":"2021-03-02T21:20:37.307Z","comments":true,"path":"galleries/2020/index.html","permalink":"http://onlywithuu.github.io/galleries/2020/index.html","excerpt":"","text":""}],"posts":[{"title":"Java_String类概述","slug":"Java-String类概述","date":"2021-03-01T12:10:22.000Z","updated":"2021-03-02T21:21:18.578Z","comments":true,"path":"posts/3e1d.html","link":"","permalink":"http://onlywithuu.github.io/posts/3e1d.html","excerpt":"","text":"Java String类详解String 类概述 String字符串 String 是 Java JDK 中内置的一种类：java.lang.String。 String 表示字符串类型，属于引用数据类型。 Java 程序中所有字符串字面值都作为 String 类的对象。（例如: “abc” , “defg” , “hello world!”），这是三个String对象。 Java 规定，字符串是常量——他们的值在创建之后不能更改的，（”abd” 不能变成 “abcd”）。 在 JDK 中规定，双引号括起来的字符串都是直接存储在 JVM 方法区 的字符串常量池中。 JDK 7.0后，字符串常量池转移到 JVM 堆区 中。 通过图片例子认识字符串常量池Cache String 对象一旦创建不可变 String s1 = \"abc\"; String s2 = \"abc\"; 由于字符串常量，被存储于字符串常量池，所以上述例子当中只出现一个对象 “abc”。 String 对象一般不会被 gc 回收 String s1 = \"abc\"; String s2 = s1 + \"de\"; 由于字符串常量，一旦创建不可更改的特性，并且储存在字符串常量池中，原来废弃的常量不会被 gc 回收，所以此例中出现三个对象 “abc”,”de”,”abcde”。 new出来的对象都在堆区 String s3 = new String(\"de\"); 由于字符串对象存储在字符串常量池，位于方法区中，而new出来的对象都储存在堆区，所以会出现s3指向位于堆区的对象内的byte数组指向位于方法区字符串常量池内的 “bc”，（解释起来果然麻烦，看图！）。 由于字符串常量池的种种特性，会出现下列“看似不可能” 字面值相同，对象地址不同 String s1 = \"abc\"; String s2 = new String(\"abc\"); System.out.println(s1 == s2); //false 尽管从字面值来看，s1 确实等于 s2。但是 s1 指向的是方法区，而 s2 指向的是堆区对象，对象内再指向方法区，二者截然不同。 不明白 String s1 = \"abc\"; String s2 = \"ab\"; System.out.println(s2 + \"c\" == s1); //false 这个例子是我在进行实验时意外发现的，原本在自动装箱的情况下，s2 + “c” 就应该是 “abc”，但是答案确实false。 百思不得其解，留待上课时询问老师。 String 类常用方法","categories":[{"name":"日常学习","slug":"日常学习","permalink":"http://onlywithuu.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://onlywithuu.github.io/tags/Java/"}]},{"title":"Java的数据类型","slug":"Java的数据类型","date":"2021-02-21T14:12:26.000Z","updated":"2021-03-02T21:21:18.531Z","comments":true,"path":"posts/251.html","link":"","permalink":"http://onlywithuu.github.io/posts/251.html","excerpt":"","text":"Java 的数据类型Java 数据类型在JVM中的分布 JVM 数据将内存大致分为：堆区，栈区，方法区 Java 数据，变量大多数存放在堆栈中。 其中，栈区主要存放局部变量，对象声明的引用等。 堆区主要存放 new 关键字创建的类（包含成员变量）和数组等. 方法区则主要储存被JVM加载过的类信息，常量，以及编译过的代码片段等。 堆与栈的优缺点 栈的优点：栈数据可以共享，存取速度比堆快。 缺点是：存在栈中数据大小与生命周期是确定的。 堆的优点：可以动态分配内存大小，生存期也不必事先告诉编译器。 缺点是：存取速度较慢。 数据类型Java 的数据类型主要包括：基本数据类型和引用数据类型。 基本数据类型 数据类型 字节 默认值 表达范围 包装类 byte（字节型） 1 0 -128~127 java.lang.Byte(父类java.lang.Number) short（短整型） 2 0 -32768～32767 java.lang.Short(父类java.lang.Number) int（整形） 4 0 -2147483648～2147483647 java.lang.Integer(父类java.lang.Number) long（长整型） 8 0L -9223372036854775808 ~ 9223372036854775807 java.lang.Long(父类java.lang.Number) float（单精度浮点型） 4 0.0F -3.4E38～3.4E38 java.lang.Float(父类java.lang.Number) double（双精度浮点型） 8 0.0 -1.7E308～1.7E308 java.lang.Double(父类java.lang.Number) boolean（布尔型） 1 false true或false java.lang.Boolean(父类java.lang.Object) char（字符型） 2 ‘\\u0000’ 从字符型对应的整型数来划分，其表示范围是0～65535 java.lang.Character(父类java.lang.Object) （提示：八种包装类都属于引用数据类型，包装类的存在是为了满足多态的需求，方便我们的开发。） 引用数据类型 Java 中的引用数据类型建立在基本数据类型的基础上，包括数组、类和接口。 需要注意的是，Java 语言中不支持 C++ 中的指针类型（*）、结构类型（struct）、联合类型（union）和枚举类型（enum）。 通俗意义上来讲，引用数据类型，是对于实例、数组对象地址的引用。实际上引用数据类型就是一个指针，只是 Java 语言中不再使用指针这个说法。 引用类型还有一种特殊的空类型(null type)，这种类型没有名字，所以无法声明或转换成一个null类型的变量。注：空类型只针对于引用类型。 参见 基本数据类型 引用数据类型","categories":[{"name":"日常学习","slug":"日常学习","permalink":"http://onlywithuu.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://onlywithuu.github.io/tags/Java/"}]},{"title":"hexo搭建博客汇总","slug":"hexo搭建博客汇总","date":"2021-02-12T10:01:12.000Z","updated":"2021-03-02T21:21:18.562Z","comments":true,"path":"posts/e7c9.html","link":"","permalink":"http://onlywithuu.github.io/posts/e7c9.html","excerpt":"","text":"hexo 搭建博客汇总使用 一台普通而又及其正常的电脑/笔记本 git 工具 node.js 工具 hexo 博客框架 github 账号 掌握 markdown 基本语法 一颗积极好学，坚持不懈的心❤️ 过程 下载安装 git 工具 git git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理工具 git官网：Download git git安装教程：Installation git 注意：选择适合当前系统的 git 工具进行下载安装 下载安装 node.js 运行环境 nodejs 是一个基于Chrome V8引擎的 JavaScript 运行环境 node.js官网：Download node.js node.js安装教程：Installation node.js 注意：选择长期支持版 LTS 进行下载安装 安装hexo框架 由于国外的 npm 源不稳定，需要更换到淘宝源下载 hexo 打开控制台输入如下命令 $ npm config set registry https://registry.npm.taobao.org npm info underscore 换源后，所有教程中的关于 npm 语句都可以替换成 cnpm 安装 hexo 框架 打开控制台输入如下命令 $ npm install -g hexo-cli 完成 hexo 框架的安装 测试 hexo 环境 初始化 hexo 新建一个空路径，例如 D:\\blog 路径 进入控制台并切换到该路径，输入如下命令 $ hexo init # 创建 hexo 工程 之后你关于博客的所有操作都在此目录 倘若出现失误/失控，直接删除该目录重新建一个空目录就好 新建一篇文章 打开控制台，进入你的博客路径，输入如下命令 $ hexo new helloworld #新建一篇名为 helloworld 的文章 helloworld 为你新建文章的名字 运行 打开控制台，进入你的博客路径，输入如下命令 $ hexo clean # 清除缓存 $ hexo generate # 生成静态文件，静态文件保存在 博客路径的 public 文件夹中 $ hexo server # 运行 hexo 服务器 clean generate server等可以尝试使用首字母代替 测试 打开浏览器，在地址栏输入 localhost:4000 如果网页成功打开，并且出现之前新建的文章，则环境搭建成功 若无法打开，则搭建失败，重新来过即可 使用 Ctrl+C 组合键退出 hexo 服务器 文章 markdown markdown：是一种轻量级标记语言，它兼容HTML语句，并且允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档 对于以前重来没写过博客的人来说（比如我），这种语法并不容易记忆掌握，只能多看多学多写 —— markdown 教程 markdown编辑器：我感觉VScode就挺好用，写代码什么的各种文件的格式都支持 部署 准备 打开并登录 github 新建一个和你用户名相同的仓库，仓库名后面加 .github.io ，这样部署到 github page 时，才会被 github 识别 复制仓库的网址 以记事本方式打开你的博客路径根目录下的 _config.yml 文件，滑倒最下面，将内容增加修改为： deploy: type: 'git' repository: 'warehouse add' branch: 'master' warehouse add 处填写刚刚复制的仓库地址 设置 git 账户信息 打开控制台，输入如下命令 $ git config --global user.name \"yourname\" $ git config --global user.email \"youremail\" yourname 最好为 github 账号名 youremail 最好为 github 绑定邮箱 安装 deploy 插件 打开控制台，输入如下命令 $ npm install hexo-deployer-git --save 即可成功安装deploy插件 部署到 github page 打开控制台，进入你的博客路径，输入如下命令 $ hexo clean # 清除缓存 $ hexo generate # 生成静态文件，静态文件保存在 博客路径的 public 文件夹中 $ hexo deploy # 将生成的静态文件部署到 github page clean generate deploy 可以尝试使用首字母代替 注意：当hexo d命令，出现 Not Found Deployer! 时 打开控制台，进入你的博客路径，输入如下命令 $ npm install --save hexo-deployer-git 重新尝试则可成功 注意，由于国内 github 的访问并不稳定，所以尽量减少 hexo deplyer 的次数 测试 过一两分钟，打开浏览器，输入 http://yourname.github.io 并进入网页 yourname 为你的 github 账号名 如果出现你之前测试 hexo 环境时出现的网页，则部署成功 若是无法打开，则部署失败，重新来过即可 美化 安装主题 Code 打开控制台，进入你的博客路径，输入如下命令 $ git clone 目标主题路径 目标目录 目标目录一般为 /theme/主题名 如果确实不知道如何安装主题，可以参考yilia主题的安装方法 $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 参考：Github yilia 方法 打开博客根目录下的 _config.yml 文件，将 theme: 后面更改为想要使用的主题名。 注意 在修改主题的同时，注意每个冒号后面都需要一个空格 —— 语法规范！ 常用官方主题 最最常用，也是常见的 hexo 主题，有早年间的 yilia ，近年的 nexT ，这两个主题的相关优化教程也相对较多 总结 此搭建博客的汇总综合多处教程，为小白用户简单介绍了搭建个人博客的步骤 如有不顺利的地方可以在评论区留言，我看见了便会尽力去解答 推荐 ~~此处推荐一位大神级别的人物 Sanarous ，他的站点现在所用的主题就是由next魔改的，大家可以学习借鉴一下大神的作品~~~ (21年02月23日) 最近才发现大神的这个 blog 一年之前弃用掉了，另附大神的新博客 Sanarous ，这个 blog 是使用 halo 框架做的，由于我（很懒）并不想更换博客，所以就不仔细研究啦~大家可以自己去学习一下哦。 附上大神做的 next 主题美化教程","categories":[{"name":"日常学习","slug":"日常学习","permalink":"http://onlywithuu.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://onlywithuu.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}],"categories":[{"name":"日常学习","slug":"日常学习","permalink":"http://onlywithuu.github.io/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://onlywithuu.github.io/tags/Java/"},{"name":"博客","slug":"博客","permalink":"http://onlywithuu.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}